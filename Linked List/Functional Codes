#include <stdio.h>
#include <stdlib.h>
#include <limits.h>  // for max and min value
struct Node
{
    int data;
    struct Node* next;
}*first = NULL;
void create(int A[], int n)
{
    int i;
    struct Node* t, * last;
    first = (struct Node*)malloc(sizeof(struct Node));
    first->data = A[0];
    first->next = NULL;
    last = first;

    for (i = 1; i < n; i++)
    {
        t = (struct Node*)malloc(sizeof(struct Node));
        t->data = A[i];
        t->next = NULL;
        last->next = t;
        last = t;
    }
}
void Display(struct Node* p)
{
    while (p != NULL)
    {
        printf("%d ", p->data);
        p = p->next;
    }
}
void Insert(struct Node* p, int index, int x)   // insert in LL
{
    struct Node* t;
    int i;

    if (index < 0 || index > count(p))
        return;
    t = (struct Node*)malloc(sizeof(struct Node));
    t->data = x;

    if (index == 0)
    {
        t->next = first;
        first = t;
    }
    else
    {
        for (i = 0; i < index - 1; i++)
            p = p->next;
        t->next = p->next;
        p->next = t;

    }


}
}

void Reverse(struct Node* p)                         //Reverse LL
{
    struct Node* q = NULL, * r = NULL;

    while (p != NULL)
    {
        r = q;
        q = p;
        p = p->next;
        q->next = r;
    }
    first = q;
}

int count(struct Node* p)                       //count no. of LL
{
    int l = 0;
    while (p)
    {
        l++;
        p = p->next;
    }
    return l;
}

int sum(struct Node* p)                         //sum of LL
{
    int s = 0;

    while (p != NULL)
    {
        s += p->data;
        p = p->next;
    }
    return s;
}


int Max(struct Node* p)                          //max element
{
    int max =INT_MIN;

    while (p)
    {
        if (p->data > max)
            max = p->data;
        p = p->next;
    }
    return max;
}
void RemoveDuplicate(struct Node *p)              //remove duplicates
{
 struct Node *q=p->next;
 
 while(q!=NULL)
 {
 if(p->data!=q->data)
 {
 p=q;
 q=q->next;
 }
 else
 {
 p->next=q->next;
 free(q);
 q=p->next;
 }
 }

}


int main()
{
    struct Node* temp;
    int A[] = { 3,5,7,10,25,8,32,2 };
    create(A, 8);
    Display(first);
    Insert(first, 0, 5);

    Reverse(first);    // for reversing and displaying
    Display(first); 
    deleting_nodes_having_greater_value_to_their_right(first;
    display_list(head);
    return 0;
}
