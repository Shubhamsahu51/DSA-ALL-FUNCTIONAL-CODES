#include <stdio.h>
#include <stdlib.h>
#include <math.h>
struct Node
{
struct Node* lchild;
int data;
int bf;
struct Node* rchild;
}*root = NULL;

int height(struct Node* p)     //height of node(coamparing max of left and right)
{
int x = 0, y = 0;
if (!p)return 0;
x = height(p->lchild);
y = height(p->rchild);
return x > y ? x + 1 : y + 1;
}

struct Node* LLRotation(struct Node* p)
{
int lbf, rbf;
struct Node* pl = p->lchild;
pl->bf = 0;
p->lchild = pl->rchild;
pl->rchild = p;
lbf = height(p->lchild) + 1;
rbf = height(p->rchild) + 1;
p->bf = lbf - rbf;
if (p == root)root = pl;
return pl;
}

struct Node* LRRotation(struct Node* p)
{
int lbf, rbf;
struct Node* pl = p->lchild;
struct Node* plr = pl->rchild;
plr->bf = 0;
p->lchild = plr->rchild;
pl->rchild = plr->lchild;
plr->lchild = pl;
plr->rchild = p;
lbf = height(p->lchild) + 1;
rbf = height(p->rchild) + 1;
p->bf = lbf - rbf;
lbf = height(pl->lchild) + 1;
rbf = height(pl->rchild) + 1;
pl->bf = lbf - rbf;
if (p == root)root = plr;
return plr;
}
struct Node* RRRotation(struct Node* p)
{
int lbf, rbf;
struct Node* pr = p->rchild;
pr->bf = 0;
p->rchild = pr->lchild;
pr->lchild = p;
lbf = height(p->lchild) + 1;
rbf = height(p->rchild) + 1;
p->bf = lbf - rbf;
if (p == root)root = pr;
return pr;
}

struct Node* RLRotation(struct Node* p)
{
int lbf, rbf;
struct Node* pr = p->rchild;
struct Node* prl = pr->lchild;
prl->bf = 0;
p->rchild = prl->lchild;
pr->lchild = prl->rchild;
prl->rchild = pr;
prl->lchild = p;
lbf = height(p->lchild) + 1;
rbf = height(p->rchild) + 1;
p->bf = lbf - rbf;
lbf = height(pr->lchild) + 1;
rbf = height(pr->rchild) + 1;
pr->bf = lbf - rbf;
if (p == root)root = prl;
return prl;
}

struct Node* RInsert(struct Node* p, int key)                 //inertion on AVL
{
struct Node* t;
int lbf, rbf;
 if (p == NULL)
 {
 t = (struct Node*)malloc(sizeof(struct Node));
 t->data = key;
 t->bf = 0;
 t->lchild = t->rchild = NULL;
 return t;
 }

if (key < p->data)
p->lchild = RInsert(p->lchild, key);

else if (key > p->data)

p->rchild = RInsert(p->rchild, key);
lbf = height(p->lchild) + 1;
rbf = height(p->rchild) + 1;
p->bf = lbf - rbf;
if (p->bf == 2 && p->lchild->bf == 1)
return LLRotation(p);
if (p->bf == 2 && p->lchild->bf == -1)
return LRRotation(p);
if (p->bf == -2 && p->rchild->bf == -1)
return RRRotation(p);
if (p->bf == -2 && p->rchild->bf == 1)
return RLRotation(p);
return p;
}

void Inorder(struct Node* p)
{
if (p)
{
Inorder(p->lchild);
printf("%d ", p->data);
Inorder(p->rchild);
}
}

struct Node* Search(int key)                       //searching in AVL
{
struct Node* t = root;
while (t != NULL)
{
if (key == t->data)
return t;
else if (key < t->data)
t = t->lchild;
else
t = t->rchild;
}
return NULL;
}

/* function for checking height of tree */                          //for deletion
int Height(struct Node* p) {
int x, y;
if (p == NULL) return 0;
x = Height(p->lchild);
y = Height(p->rchild);
return x > y ? (x + 1) : (y + 1);
}
/* function for Inordwe predessor of deleting node*/
struct Node* Inpre(struct Node* p) {
while (p != NULL && p->rchild != NULL) {
p = p->rchild;
}
return p;
}
/* function for Inorder successor of deleting node*/
struct Node* Insucc(struct Node* p) {
while (p != NULL && p->lchild != NULL) {
p = p->lchild;
}
return p;
}
/* Given a binary search tree and a key, this function deletes the key
 and returns the new root */
struct Node* deleteNode(struct Node* p, int key)
{
int lbf, rbf;
struct Node* q;
// base case
if (p == NULL) return p;
if (p->lchild == NULL && p->rchild == NULL) {
if (p == root) root = NULL;
free(p);
return NULL;
}
// If the key to be deleted is smaller than the root's key,
// then it lies in left subtree
if (key < p->data)
p->lchild = deleteNode(p->lchild, key);
// If the key to be deleted is greater than the root's key,
// then it lies in right subtree
else if (key > p->data)
p->rchild = deleteNode(p->rchild, key);
else
{
if (Height(p->lchild) > Height(p->rchild)) {
q = Inpre(p->lchild);
p->data = q->data;
p->lchild = deleteNode(p->lchild, q->data);
}
else {
 q = Insucc(p->rchild);
p->data = q->data;
p->rchild = deleteNode(p->rchild, q->data);
}
}
lbf = height(p->lchild) + 1;                               //check BF of AVL tree after deletion
rbf = height(p->rchild) + 1;
p->bf = lbf - rbf;
if (p->bf == 2 && p->lchild->bf == 1)
return LLRotation(p);
if (p->bf == 2 && p->lchild->bf == -1)
return LRRotation(p);
if (p->bf == -2 && p->rchild->bf == -1)
return RRRotation(p);
if (p->bf == -2 && p->rchild->bf == 1)
return RLRotation(p);
return p;
}
int main()
{
struct Node* temp;
root = RInsert(root, 30);
RInsert(root, 50);
RInsert(root, 40);
RInsert(root, 20);
RInsert(root, 10);
RInsert(root, 42);
RInsert(root, 46);
Inorder(root);
printf("\n");
temp = Search(2);
if (temp != NULL)
printf("element %d is found\n", temp->data);
else
printf("element is not found\n");
printf("\nDelete 20\n");
root = deleteNode(root, 20);
printf("Inorder traversal of the modified tree \n" );
Inorder(root);
return 0;
}


